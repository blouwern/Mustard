// -*- C++ -*-
//
// Copyright (C) 2020-2025  Mustard developers
//
// This file is part of Mustard, an offline software framework for HEP experiments.
//
// Mustard is free software: you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the Free Software
// Foundation, either version 3 of the License, or (at your option) any later
// version.
//
// Mustard is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
// A PARTICULAR PURPOSE. See the GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along with
// Mustard. If not, see <https://www.gnu.org/licenses/>.

#include "Mustard/IO/PrettyLog.h++"
#include "Mustard/Physics/QFT/MSqME2ENNE.h++"
#include "Mustard/Utility/MathConstant.h++"
#include "Mustard/Utility/PhysicalConstant.h++"

#include "CLHEP/Vector/LorentzVector.h"

#include "muc/math"

#include <stdexcept>

namespace Mustard::inline Physics::QFT {

using namespace PhysicalConstant;
using namespace MathConstant;

MSqME2ENNE::MSqME2ENNE(Ver ver) :
    MatrixElement{},
    fVersion{ver} {}

auto MSqME2ENNE::operator()(const InitialStateMomenta& pI, const FinalStateMomenta& pF) const -> double {
    const auto& [p1, p2]{pI};
    const auto& [p3, p4, p5, p6]{pF};

    constexpr auto s{[](auto&& a, auto&& b) {
        return 2 * (a * b);
    }};

    const auto mMuSq{p1.m2()};
    const auto mESq{p2.m2()};
    const auto s12{s(p1, p2)};
    const auto s13{s(p1, p3)};
    const auto s14{s(p1, p4)};
    const auto s15{s(p1, p5)};
    const auto s16{s(p1, p6)};
    const auto s23{s(p2, p3)};
    const auto s24{s(p2, p4)};
    const auto s25{s(p2, p5)};
    const auto s26{s(p2, p6)};
    const auto s34{s(p3, p4)};
    const auto s35{s(p3, p5)};
    const auto s36{s(p3, p6)};
    const auto s45{s(p4, p5)};
    const auto s46{s(p4, p6)};
    const auto s56{s(p5, p6)};

    switch (fVersion) {
    case Ver::QEDTree2D:
        return MSqQEDTree2D(mMuSq, mESq,
                            s12, s13, s14, s15, s16,
                            s23, s24, s25, s26,
                            s34, s35, s36,
                            s45, s46,
                            s56);
    case Ver::QEDTree4D:
        return MSqQEDTree4D(mMuSq, mESq,
                            s12, s13, s14, s15, s16,
                            s23, s24, s25, s26,
                            s34, s35, s36,
                            s45, s46,
                            s56);
    default:
        Throw<std::invalid_argument>("No such version");
    }
}

MUSTARD_OPTIMIZE_FAST auto MSqME2ENNE::MSqQEDTree2D(double mMuSq, double mESq,
                                                    double s12, double s13, double s14, double s15, double s16,
                                                    double s23, double s24, double s25, double s26,
                                                    double s34, double s35, double s36,
                                                    double s45, double s46,
                                                    double s56) -> double {
    //
    // Matrix element generated by FeynCalc 10.1.0 + FeynArt 3.12
    //

    using muc::pow;

    constexpr auto constant{
        32 * pow(4 * pi * fine_structure_const * reduced_fermi_constant, 2)};

    const auto numerator{
        s14 *
        ((-(mMuSq * s26 * s35) + s14 * s26 * s35 +
          2 * pow(mESq, 2) * (4 * s15 + s25 - 4 * s45) - s16 * s23 * s45 -
          s13 * s26 * s45 + s26 * s34 * s45 + s23 * s45 * s46 +
          s15 * (s16 * s23 + s13 * s26 - s26 * s34 - s23 * s46) -
          mMuSq * s23 * s56 + s14 * s23 * s56 +
          mESq * (-2 * mMuSq * s25 + 2 * s14 * s25 + s26 * s35 +
                  2 * (s12 - s24 + s36) * (s15 - s45) + s23 * s56)) /
             pow(2 * mESq + s36, 2) +
         (-(mMuSq * s25 * s36) + s14 * s25 * s36 - s16 * s23 * s45 -
          s12 * s36 * s45 + s24 * s36 * s45 +
          pow(mESq, 2) * (8 * s15 - 2 * (s35 + 4 * s45)) + s23 * s45 * s46 +
          s15 * (s16 * s23 + s12 * s36 - s24 * s36 - s23 * s46) -
          mMuSq * s23 * s56 + s14 * s23 * s56 +
          mESq * (2 * mMuSq * s35 - 2 * s14 * s35 + s25 * s36 +
                  2 * (s13 + s26 - s34) * (-s15 + s45) + s23 * s56)) /
             pow(mESq + mMuSq - s13 - s14 - s15 + s34 + s35 + s45, 2) +
         (2 * (s23 * (s15 - s45) * (s16 - s46) + (-mMuSq + s14) * s23 * s56 +
               pow(mESq, 2) * (4 * s15 + s25 - s35 - 4 * s45 + s56) +
               mESq * ((s15 - s45) * (s12 - s13 + s16 + s23 - s24 - s26 + s34 +
                                      s36 - s46) +
                       s23 * s56 - (mMuSq - s14) * (s25 - s35 + s56)))) /
             ((2 * mESq + s36) *
              (mESq + mMuSq - s13 - s14 - s15 + s34 + s35 + s45)))};

    const auto denominator{pow(mESq - mMuSq + s14 + s15 - s45, 2)};

    return constant * numerator / denominator;
}

MUSTARD_OPTIMIZE_FAST auto MSqME2ENNE::MSqQEDTree4D(double mMuSq, double mESq,
                                                    double s12, double s13, double s14, double s15, double s16,
                                                    double s23, double s24, double s25, double s26,
                                                    double s34, double s35, double s36,
                                                    double s45, double s46,
                                                    double s56) -> double {
    //
    // Matrix element generated by FeynCalc 10.1.0 + FeynArt 3.12
    //

    using muc::pow;

    constexpr auto constant{
        32 * pow(4 * pi * fine_structure_const * reduced_fermi_constant, 2)};

    const auto stem{
        ((2 *
          ((s35 * (2 * pow(mESq, 2) * s14 + s16 * s23 * s34 + s16 * s25 * s34 -
                   s16 * s24 * s35 + s12 * s34 * s36 + s16 * s23 * s45 +
                   s16 * s25 * s45 + s12 * s36 * s45 - s12 * s35 * s46 +
                   mMuSq * (s16 * s24 - 2 * s26 * (s34 + s45) + s12 * s46) -
                   mESq * (s16 * s24 + 2 * s13 * s34 + 2 * s15 * s34 -
                           2 * s14 * s35 + 2 * s13 * s45 + 2 * s15 * s45 +
                           2 * mMuSq * (s14 - 4 * (s34 + s45)) + s12 * s46) +
                   s12 * s34 * s56 + s12 * s45 * s56)) /
               pow(mESq - mMuSq + s34 + s35 + s45, 2) -
           (s14 *
            (mMuSq * s25 * s36 - s14 * s25 * s36 + s16 * s23 * s45 +
             s12 * s36 * s45 - s24 * s36 * s45 +
             pow(mESq, 2) * (-8 * s15 + 2 * s35 + 8 * s45) - s23 * s45 * s46 +
             s15 * (-(s16 * s23) - s12 * s36 + s24 * s36 + s23 * s46) +
             mMuSq * s23 * s56 - s14 * s23 * s56 +
             mESq * (2 * s15 * s26 - 2 * s15 * s34 - 2 * mMuSq * s35 +
                     2 * s14 * s35 - s25 * s36 + 2 * s13 * (s15 - s45) -
                     2 * s26 * s45 + 2 * s34 * s45 - s23 * s56))) /
               pow(mESq - mMuSq + s14 + s15 - s45, 2) +
           (-(s14 * s16 * s23 * s35) - mMuSq * s16 * s24 * s35 +
            mMuSq * s14 * s26 * s35 + mMuSq * s25 * s34 * s36 -
            s14 * s25 * s34 * s36 - s12 * s14 * s35 * s36 +
            mMuSq * s24 * s35 * s36 + s13 * s16 * s23 * s45 +
            s13 * s16 * s25 * s45 - mMuSq * s13 * s26 * s45 -
            2 * s12 * s16 * s35 * s45 + s16 * s24 * s35 * s45 +
            2 * mMuSq * s26 * s35 * s45 - 2 * s14 * s26 * s35 * s45 +
            s12 * s13 * s36 * s45 - 2 * mMuSq * s23 * s36 * s45 +
            2 * s14 * s23 * s36 * s45 + mMuSq * s24 * s36 * s45 -
            s13 * s24 * s36 * s45 - mMuSq * s25 * s36 * s45 +
            s14 * s25 * s36 * s45 -
            2 * pow(mESq, 2) * (s15 * s34 + s14 * (2 * s15 + s35) - s13 * s45) +
            mMuSq * s13 * s25 * s46 - mMuSq * s25 * s34 * s46 -
            mMuSq * s12 * s35 * s46 + mMuSq * s23 * s35 * s46 +
            2 * mMuSq * s24 * s35 * s46 - mMuSq * s25 * s35 * s46 +
            s14 * s25 * s35 * s46 + mMuSq * s23 * s45 * s46 -
            s13 * s23 * s45 * s46 - s13 * s25 * s45 * s46 +
            s12 * s35 * s45 * s46 + mMuSq * s13 * s24 * s56 +
            mMuSq * s23 * s34 * s56 - s14 * s23 * s34 * s56 -
            mMuSq * s24 * s34 * s56 + 2 * mMuSq * s25 * s34 * s56 -
            2 * s14 * s25 * s34 * s56 - mMuSq * s24 * s35 * s56 +
            s14 * s24 * s35 * s56 + s12 * s13 * s45 * s56 -
            mMuSq * s23 * s45 * s56 + s14 * s23 * s45 * s56 -
            s13 * s24 * s45 * s56 +
            s15 * (-(s16 * (s23 * s34 + s25 * s34 - s24 * s35)) -
                   s12 * s34 * s36 + s24 * s34 * s36 + s23 * s34 * s46 +
                   s25 * s34 * s46 + s12 * s35 * s46 - 2 * s24 * s35 * s46 +
                   mMuSq * (s26 * s34 - s24 * s36 - s23 * s46) -
                   s12 * s34 * s56 + s24 * s34 * s56) +
            mESq *
                (2 * pow(s15, 2) * s34 - s16 * s25 * s34 -
                 4 * mMuSq * s34 * s35 + 2 * mMuSq * s13 * s45 -
                 2 * pow(s13, 2) * s45 - 2 * s12 * s16 * s45 + s16 * s24 * s45 -
                 s16 * s25 * s45 + 4 * mMuSq * s26 * s45 - s13 * s26 * s45 +
                 2 * s13 * s34 * s45 + 2 * s13 * pow(s45, 2) -
                 4 * mMuSq * s25 * s46 + s13 * s25 * s46 + s12 * s45 * s46 -
                 4 * mMuSq * s24 * s56 + s13 * s24 * s56 - s12 * s34 * s56 -
                 s12 * s45 * s56 +
                 s15 * (s16 * s24 - 2 * mMuSq * s34 + 2 * s13 * s34 +
                        s26 * s34 - 2 * pow(s34, 2) - 2 * s14 * s35 -
                        2 * s13 * s45 - 2 * s34 * s45 + s12 * s46 -
                        2 * s24 * s46 + s25 * s46 + s24 * s56) +
                 s14 * (s16 * s25 - 2 * mMuSq * s35 + 2 * s13 * s35 +
                        s26 * s35 + 2 * s34 * s35 - s25 * s36 - 2 * s26 * s45 +
                        2 * s35 * s45 + s25 * s46 + s12 * s56 - s23 * s56 +
                        s24 * s56 - 2 * s25 * s56))) /
               ((mESq - mMuSq + s14 + s15 - s45) *
                (mESq - mMuSq + s34 + s35 + s45)))) /
             pow(mESq + mMuSq - s13 - s14 - s15 + s34 + s35 + s45, 2) +
         ((2 * s25 *
           (-4 * pow(mESq, 2) * s14 + pow(s16, 2) * s34 -
            2 * mMuSq * s14 * s36 - s14 * s16 * s36 + 2 * mMuSq * s34 * s36 +
            pow(s13, 2) * s46 + 2 * mMuSq * s36 * s46 + s16 * s36 * s46 +
            s13 * (s14 * (2 * s16 - s36) + s34 * s36 - s16 * (s34 + s46)) +
            mESq * (-2 * s14 * s16 + 2 * s16 * s34 - 2 * s14 * s36 +
                    4 * s16 * s46 + 4 * mMuSq * (-s14 + s34 + s46) +
                    s13 * (-2 * s14 + 4 * s34 + 2 * s46)))) /
              pow(-2 * mESq + s13 + s16 - s36, 2) +
          (2 * s14 *
           (-(mMuSq * s26 * s35) + s14 * s26 * s35 +
            2 * pow(mESq, 2) * (4 * s15 + s25 - 4 * s45) - s16 * s23 * s45 -
            s13 * s26 * s45 + s26 * s34 * s45 + s23 * s45 * s46 +
            s15 * (s16 * s23 + s13 * s26 - s26 * s34 - s23 * s46) -
            mMuSq * s23 * s56 + s14 * s23 * s56 +
            mESq * (-2 * s15 * s24 - 2 * mMuSq * s25 + 2 * s14 * s25 +
                    s26 * s35 + 2 * s15 * s36 + 2 * s12 * (s15 - s45) +
                    2 * s24 * s45 - 2 * s36 * s45 + s23 * s56))) /
              pow(mESq - mMuSq + s14 + s15 - s45, 2) +
          (s13 * s16 * s25 * s34 - pow(s16, 2) * s25 * s34 +
           s13 * s15 * s26 * s34 - s15 * s16 * s26 * s34 -
           s16 * s25 * pow(s34, 2) - s15 * s26 * pow(s34, 2) -
           s13 * s16 * s24 * s35 + pow(s16, 2) * s24 * s35 +
           s16 * s24 * s34 * s35 - 2 * mMuSq * s26 * s34 * s35 +
           s13 * s15 * s24 * s36 + s15 * s16 * s24 * s36 -
           2 * pow(s14, 2) * s25 * s36 - s15 * s24 * s34 * s36 -
           2 * mMuSq * s25 * s34 * s36 + s13 * s16 * s23 * s45 -
           pow(s16, 2) * s23 * s45 - pow(s13, 2) * s26 * s45 +
           s13 * s16 * s26 * s45 - s16 * s23 * s34 * s45 +
           s13 * s26 * s34 * s45 - s12 * s13 * s36 * s45 -
           s12 * s16 * s36 * s45 + s12 * s34 * s36 * s45 -
           s13 * s15 * s23 * s46 + s15 * s16 * s23 * s46 -
           pow(s13, 2) * s25 * s46 + s13 * s16 * s25 * s46 +
           s15 * s23 * s34 * s46 + s13 * s25 * s34 * s46 +
           s16 * s25 * s34 * s46 + s15 * s26 * s34 * s46 +
           s12 * s13 * s35 * s46 - s12 * s16 * s35 * s46 -
           s16 * s24 * s35 * s46 + 2 * mMuSq * s26 * s35 * s46 -
           s12 * s34 * s35 * s46 - s15 * s24 * s36 * s46 -
           2 * mMuSq * s25 * s36 * s46 + s16 * s23 * s45 * s46 -
           s13 * s26 * s45 * s46 + s12 * s36 * s45 * s46 -
           s15 * s23 * pow(s46, 2) - s13 * s25 * pow(s46, 2) +
           s12 * s35 * pow(s46, 2) -
           4 * pow(mESq, 2) *
               (2 * s14 * s15 + (s13 + s16) * s45 - s15 * (s34 + s46)) +
           pow(s13, 2) * s24 * s56 - s13 * s16 * s24 * s56 -
           s12 * s13 * s34 * s56 + s12 * s16 * s34 * s56 +
           2 * mMuSq * s23 * s34 * s56 - s13 * s24 * s34 * s56 +
           s12 * pow(s34, 2) * s56 - 2 * mMuSq * s23 * s46 * s56 +
           s13 * s24 * s46 * s56 - s12 * s34 * s46 * s56 +
           s14 * (2 * s16 * s25 * s34 + 2 * s12 * s16 * s35 -
                  2 * s16 * s24 * s35 - s16 * s26 * s35 + s26 * s34 * s35 +
                  4 * mMuSq * s25 * s36 + s16 * s25 * s36 + s25 * s34 * s36 -
                  2 * s15 * (s16 * s23 + s13 * s26 - s24 * s36) +
                  2 * s16 * s23 * s45 - 2 * s12 * s36 * s45 - s26 * s35 * s46 +
                  s25 * s36 * s46 + s16 * s23 * s56 - s23 * s34 * s56 +
                  s23 * s46 * s56 +
                  s13 * (-4 * s16 * s25 + s26 * s35 + s25 * s36 +
                         2 * s26 * s45 + 2 * s25 * s46 + 2 * s12 * s56 -
                         s23 * s56 - 2 * s24 * s56)) +
           2 * mESq *
               (3 * s15 * s16 * s24 - 2 * pow(s14, 2) * s25 -
                3 * s15 * s24 * s34 - 2 * mMuSq * s25 * s34 -
                4 * mMuSq * s24 * s35 - s16 * s34 * s35 + s15 * s34 * s36 -
                3 * s12 * s16 * s45 + 4 * mMuSq * s23 * s45 +
                4 * mMuSq * s26 * s45 + 3 * s12 * s34 * s45 - s16 * s36 * s45 -
                3 * s15 * s24 * s46 - 2 * mMuSq * s25 * s46 + s15 * s36 * s46 +
                3 * s12 * s45 * s46 - 4 * mMuSq * s24 * s56 + s16 * s34 * s56 +
                s14 * (4 * mMuSq * s25 + s13 * s25 + s16 * s25 + s25 * s34 +
                       2 * s12 * s35 + 2 * s16 * s35 + 2 * s24 * s35 -
                       2 * s15 * (s23 - s24 + s26 + s36) - 2 * s12 * s45 -
                       2 * s23 * s45 - 2 * s26 * s45 + s25 * s46 +
                       2 * s12 * s56 + 2 * s13 * s56 + 2 * s24 * s56) +
                s13 * (3 * s15 * s24 - 3 * s12 * s45 - s36 * s45 + s35 * s46 -
                       s46 * s56))) /
              ((2 * mESq - s13 - s16 + s36) *
               (mESq - mMuSq + s14 + s15 - s45))) /
             pow(2 * mESq + s36, 2) +
         ((4 * s14 *
           (pow(mESq, 2) * (4 * s15 + s25 - s35 - 4 * s45 + s56) +
            s23 * (-(s16 * s45) + s15 * (s16 - s46) + s45 * s46 - mMuSq * s56 +
                   s14 * s56) +
            mESq * (-(s13 * s15) + s15 * s16 + s15 * s23 - s15 * s24 -
                    mMuSq * s25 + s14 * s25 - s15 * s26 + s15 * s34 +
                    mMuSq * s35 - s14 * s35 + s15 * s36 + s12 * (s15 - s45) +
                    s13 * s45 - s16 * s45 - s23 * s45 + s24 * s45 + s26 * s45 -
                    s34 * s45 - s36 * s45 - s15 * s46 + s45 * s46 -
                    mMuSq * s56 + s14 * s56 + s23 * s56))) /
              pow(mESq - mMuSq + s14 + s15 - s45, 2) +
          (-(mMuSq * s16 * s25 * s34) + 2 * s15 * s16 * (s23 + s25) * s34 -
           mMuSq * s16 * s24 * s35 + 2 * s13 * s16 * s24 * s35 -
           2 * s14 * s16 * s25 * s35 + mMuSq * s14 * s26 * s35 -
           2 * s12 * s16 * s34 * s35 + 2 * mMuSq * s26 * s34 * s35 +
           2 * s16 * s26 * s34 * s35 + mMuSq * s14 * s25 * s36 -
           2 * mMuSq * s24 * s35 * s36 - 2 * s16 * s24 * s35 * s36 +
           mMuSq * s16 * s23 * s45 - 2 * s13 * s16 * s23 * s45 -
           2 * s13 * s16 * s25 * s45 + mMuSq * s13 * s26 * s45 -
           mMuSq * s12 * s36 * s45 + 2 * mMuSq * s23 * s36 * s45 +
           2 * s16 * s23 * s36 * s45 + 2 * mMuSq * s25 * s36 * s45 +
           2 * s16 * s25 * s36 * s45 - mMuSq * s13 * s25 * s46 -
           mMuSq * s12 * s35 * s46 + 2 * mMuSq * s25 * s35 * s46 +
           2 * s16 * s25 * s35 * s46 - 2 * mMuSq * s26 * s35 * s46 -
           2 * mMuSq * s25 * s36 * s46 +
           mMuSq * s15 * (-(s26 * s34) + s24 * s36 + s23 * s46) +
           2 * pow(mESq, 2) *
               ((4 * mMuSq + s12 - s13 + s16) * s45 -
                s15 * (s24 + 3 * s34 + 4 * s45 - s46) +
                s14 * (2 * s15 - s25 + s35 - s56)) -
           mMuSq * s14 * s23 * s56 - mMuSq * s13 * s24 * s56 +
           mMuSq * s12 * s34 * s56 - 2 * mMuSq * s23 * s34 * s56 -
           2 * s16 * s23 * s34 * s56 - 2 * mMuSq * s25 * s34 * s56 -
           2 * s16 * s25 * s34 * s56 + 2 * mMuSq * s23 * s46 * s56 +
           mESq *
               (-2 * s14 * s16 * s25 + 2 * s13 * s25 * s34 +
                3 * s16 * s25 * s34 - 2 * s13 * s14 * s35 -
                3 * s16 * s24 * s35 - 2 * s14 * s25 * s35 + s14 * s26 * s35 -
                2 * s12 * s34 * s35 - 2 * s16 * s34 * s35 - s14 * s25 * s36 +
                2 * s14 * s35 * s36 + 2 * pow(s13, 2) * s45 +
                2 * s12 * s16 * s45 + 3 * s16 * s23 * s45 +
                2 * s13 * s25 * s45 + 6 * s16 * s25 * s45 - s13 * s26 * s45 -
                2 * s16 * s26 * s45 + s12 * s36 * s45 - 2 * s13 * s36 * s45 +
                s13 * s25 * s46 + 2 * s16 * s25 * s46 - s12 * s35 * s46 -
                2 * pow(s15, 2) * (s34 + s46) - s14 * s23 * s56 +
                s13 * s24 * s56 + 2 * s16 * s24 * s56 - 2 * s14 * s25 * s56 -
                s12 * s34 * s56 + 2 * s13 * s34 * s56 +
                s15 *
                    (2 * s23 * s34 + 2 * s25 * s34 + s26 * s34 + 2 * s14 * s35 +
                     2 * s14 * s36 - s24 * s36 - 4 * s34 * s36 - 4 * s36 * s45 +
                     2 * s16 * (-s24 + s34 + s45) + s23 * s46 + 2 * s25 * s46 -
                     2 * s13 * (s34 - s45 + s46) + 2 * s14 * s56) +
                2 * mMuSq *
                    (-(s12 * s45) - s13 * s45 + s16 * s45 + 2 * s25 * s45 -
                     2 * s26 * s45 - 2 * s35 * s45 + 2 * s36 * s45 -
                     2 * s25 * s46 + 2 * s35 * s46 + s15 * (s24 + s34 + s46) +
                     s14 * (s25 - s35 - s56) + 2 * s24 * s56 - 2 * s34 * s56 -
                     2 * s45 * s56))) /
              ((2 * mESq - s13 - s16 + s36) *
               (mESq - mMuSq + s34 + s35 + s45)) +
          ((pow(s16, 2) * s25 * s34 + s15 * s16 * s26 * s34 -
            pow(s16, 2) * s24 * s35 - s15 * s16 * s24 * s36 +
            pow(s16, 2) * s23 * s45 - s13 * s16 * s26 * s45 +
            s12 * s16 * s36 * s45 +
            4 * pow(mESq, 2) * (s14 * s15 - s15 * s34 + s13 * s45) -
            s15 * s16 * s23 * s46 - s13 * s16 * s25 * s46 -
            s16 * s25 * s34 * s46 - s15 * s26 * s34 * s46 +
            s12 * s16 * s35 * s46 + s16 * s24 * s35 * s46 -
            2 * mMuSq * s26 * s35 * s46 + s15 * s24 * s36 * s46 +
            2 * mMuSq * s25 * s36 * s46 - s16 * s23 * s45 * s46 +
            s13 * s26 * s45 * s46 - s12 * s36 * s45 * s46 +
            s15 * s23 * pow(s46, 2) + s13 * s25 * pow(s46, 2) -
            s12 * s35 * pow(s46, 2) + s13 * s16 * s24 * s56 -
            s12 * s16 * s34 * s56 + 2 * mMuSq * s23 * s46 * s56 -
            s13 * s24 * s46 * s56 + s12 * s34 * s46 * s56 +
            pow(s14, 2) * (-(s26 * s35) + s25 * s36 + s23 * s56) -
            s14 * (s16 * s25 * s34 + 2 * s12 * s16 * s35 - s16 * s24 * s35 -
                   2 * mMuSq * s26 * s35 - s16 * s26 * s35 +
                   2 * mMuSq * s25 * s36 + s16 * s25 * s36 + s16 * s23 * s45 -
                   s12 * s36 * s45 - s12 * s35 * s46 - s26 * s35 * s46 +
                   s25 * s36 * s46 +
                   s15 * (-2 * s16 * s23 - s26 * s34 + s24 * s36 + s23 * s46) +
                   2 * mMuSq * s23 * s56 + s16 * s23 * s56 + s12 * s34 * s56 +
                   s23 * s46 * s56 +
                   s13 * (-2 * s16 * s25 + s26 * s45 + s25 * s46 - s24 * s56)) -
            2 * mESq *
                (2 * s15 * s16 * s24 - pow(s14, 2) * s25 + 2 * s15 * s16 * s34 -
                 s15 * s24 * s34 - 2 * s16 * s25 * s34 - 2 * mMuSq * s24 * s35 -
                 s16 * s34 * s35 + s15 * s34 * s36 - 2 * s12 * s16 * s45 +
                 2 * mMuSq * s23 * s45 + 2 * mMuSq * s26 * s45 +
                 s12 * s34 * s45 - 2 * s16 * s34 * s45 - 2 * s15 * s24 * s46 -
                 2 * mMuSq * s25 * s46 + 2 * s12 * s45 * s46 -
                 2 * mMuSq * s24 * s56 +
                 s14 *
                     (2 * mMuSq * s25 + 3 * s16 * s25 + s12 * s35 + s16 * s35 +
                      s24 * s35 - s15 * (2 * s16 + s23 - s24 + s26 + s36) -
                      s12 * s45 + 2 * s16 * s45 - s23 * s45 - s26 * s45 +
                      s25 * s46 + s12 * s56 + s24 * s56) +
                 s13 * (s15 * s24 - s12 * s45 - s36 * s45 - 2 * s15 * s46 +
                        2 * s25 * s46 + s35 * s46 + 2 * s45 * s46 +
                        s14 * (2 * s15 - 2 * s25 - 2 * s45 + s56)))) /
               (2 * mESq - s13 - s16 + s36) +
           (-(mMuSq * s16 * s25 * s34) + 2 * s14 * s16 * s23 * s35 +
            mMuSq * s16 * s24 * s35 - mMuSq * s14 * s26 * s35 +
            mMuSq * s14 * s25 * s36 + mMuSq * s16 * s23 * s45 -
            2 * s13 * s16 * s23 * s45 - 2 * s13 * s16 * s25 * s45 +
            mMuSq * s13 * s26 * s45 + 2 * s12 * s16 * s35 * s45 -
            2 * mMuSq * s26 * s35 * s45 + 2 * s14 * s26 * s35 * s45 -
            mMuSq * s12 * s36 * s45 + 2 * mMuSq * s23 * s36 * s45 -
            2 * s14 * s23 * s36 * s45 + 2 * mMuSq * s25 * s36 * s45 -
            2 * s14 * s25 * s36 * s45 +
            2 * pow(mESq, 2) * (s15 * s34 + s14 * (2 * s15 + s35) - s13 * s45) -
            mMuSq * s13 * s25 * s46 + 2 * mMuSq * s25 * s34 * s46 +
            mMuSq * s12 * s35 * s46 - 2 * mMuSq * s23 * s35 * s46 -
            2 * mMuSq * s24 * s35 * s46 - 2 * mMuSq * s23 * s45 * s46 +
            2 * s13 * s23 * s45 * s46 + 2 * s13 * s25 * s45 * s46 -
            2 * s12 * s35 * s45 * s46 +
            s15 * (2 * s16 * (s23 * s34 + s25 * s34 - s24 * s35) -
                   2 * (s23 * s34 + s25 * s34 - s24 * s35) * s46 +
                   mMuSq * (-(s26 * s34) + s24 * s36 + s23 * s46)) -
            mMuSq * s14 * s23 * s56 - mMuSq * s13 * s24 * s56 +
            mMuSq * s12 * s34 * s56 - 2 * mMuSq * s23 * s34 * s56 +
            2 * s14 * s23 * s34 * s56 - 2 * mMuSq * s25 * s34 * s56 +
            2 * s14 * s25 * s34 * s56 + 2 * mMuSq * s24 * s35 * s56 -
            2 * s14 * s24 * s35 * s56 +
            mESq *
                (-2 * s13 * s15 * s24 - 2 * pow(s15, 2) * s24 -
                 2 * s15 * s16 * s24 + 2 * s12 * s15 * s34 -
                 2 * s13 * s15 * s34 - 2 * pow(s15, 2) * s34 +
                 2 * s15 * s16 * s34 + s16 * s25 * s34 - s15 * s26 * s34 +
                 2 * s15 * pow(s34, 2) - 2 * s13 * s24 * s35 -
                 2 * s15 * s24 * s35 + s16 * s24 * s35 + 2 * s12 * s34 * s35 +
                 2 * s16 * s34 * s35 - s15 * s24 * s36 + 2 * pow(s13, 2) * s45 +
                 2 * s12 * s15 * s45 + 2 * s13 * s15 * s45 +
                 2 * s12 * s16 * s45 + 2 * s15 * s16 * s45 - s16 * s23 * s45 +
                 2 * s13 * s24 * s45 + 2 * s15 * s24 * s45 + s13 * s26 * s45 -
                 2 * s12 * s34 * s45 - 2 * s13 * s34 * s45 +
                 2 * s15 * s34 * s45 - 2 * s16 * s34 * s45 +
                 2 * s12 * s35 * s45 + 2 * s16 * s35 * s45 + s12 * s36 * s45 -
                 2 * s12 * pow(s45, 2) - 2 * s13 * pow(s45, 2) -
                 2 * s16 * pow(s45, 2) - 2 * s13 * s15 * s46 -
                 2 * pow(s15, 2) * s46 + s15 * s23 * s46 + 2 * s15 * s24 * s46 -
                 s13 * s25 * s46 - s12 * s35 * s46 - 2 * s13 * s35 * s46 -
                 2 * s15 * s35 * s46 - 2 * s12 * s45 * s46 +
                 2 * s13 * s45 * s46 + 2 * s15 * s45 * s46 - s13 * s24 * s56 -
                 2 * s15 * s24 * s56 + s12 * s34 * s56 + 2 * s12 * s45 * s56 +
                 s14 *
                     (-2 * s16 * s25 + 2 * mMuSq * s35 - 2 * s13 * s35 +
                      2 * s23 * s35 + 2 * s25 * s35 - s26 * s35 -
                      2 * s34 * s35 + s25 * s36 + 2 * s35 * s36 -
                      2 * s23 * s45 - 2 * s25 * s45 + 2 * s26 * s45 -
                      2 * s35 * s45 - 2 * s36 * s45 + s23 * s56 -
                      2 * s24 * s56 + 2 * s25 * s56 + 2 * s35 * s56 -
                      2 * s45 * s56 + 2 * s15 * (s23 + s25 + s35 + s36 + s56)) +
                 2 * mMuSq *
                     (2 * s34 * s35 - s13 * s45 - 2 * s26 * s45 +
                      2 * s25 * s46 + 2 * s35 * s46 - 2 * s45 * s46 +
                      s15 * (2 * s24 + s34 + 2 * s46) +
                      2 * s24 * (s35 - s45 + s56)))) /
               (mESq - mMuSq + s34 + s35 + s45)) /
              (-mESq + mMuSq - s14 - s15 + s45)) /
             ((2 * mESq + s36) *
              (mESq + mMuSq - s13 - s14 - s15 + s34 + s35 + s45))) /
        2.};

    return constant * stem;
}

} // namespace Mustard::inline Physics::QFT
